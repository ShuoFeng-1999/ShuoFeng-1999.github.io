<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo + github 搭建个人博客教程 及遇到的问题</title>
      <link href="/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/2021/07/29/"/>
      <url>/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/2021/07/29/</url>
      
        <content type="html"><![CDATA[<p>​        欢迎查看我的第一篇博客,该博客是为了测试博客内容的更新／发布／查看等功能而编写的测试博客，另外该博客还声明本博客站都有哪些信息可以查看，我的个人博客是为了记录在开发过程中遇到的问题及解决方案而建设的，采用的是＇ｇｉｔｈｕｂ　＋　ｈｅｘｏ＇技术搭建的，搭建教程在网上有很多，想要搭建个人博客的朋友可以自行搜索，当然也可以查看我找到的这篇搭建教程：</p><h1 id="一，使用hexo-github免费搭建个人博客网站超详细教程"><a href="#一，使用hexo-github免费搭建个人博客网站超详细教程" class="headerlink" title="一，使用hexo+github免费搭建个人博客网站超详细教程"></a>一，使用hexo+github免费搭建个人博客网站超详细教程</h1><blockquote><p>版权声明：本文为CSDN博主「wapchief」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/wapchief/article/details/54602515">https://blog.csdn.net/wapchief/article/details/54602515</a></p><p>很多人都想搭建自己的博客，但是奈何技术有限，服务器部署，HTML，域名解析，等等，这一大堆东西可真有的折腾。</p><p>但是如果有这样一个机会，不需要太复杂的操作，不要服务器，不要域名，不用写html，你愿意去尝试吗？</p><p>可以先看一下我自己的<a href="https://wapchief.github.io/">https://wapchief.github.io/</a><br>背景图有点大，3M多，可能加载比较慢，但是一进去能看到默认的有个背景，然后是默认背景慢慢被覆盖的情况。<br>当时也是费了半天功夫才搭建好，在这篇文章中会详细介绍整个流程，尽量避免入坑吧，但要是真是你自己给自己挖坑那就没办法了。</p><p>搭建的时候也是看着别人的教程一点点跟进，但是都有缺陷。<br>比如分支的创建，和私人域名的解析，有这方面的教程但是都不是太完善，有些只是教你搭建但是后期没有考虑换电脑，换环境的情况。包括后期维护等等。</p><p>这是我github上的源码，为了便于理解。本文相关部分也会结合源码进行讲解。有不清楚的地方欢迎提问，尽我能力给大家解决（毕竟我不是专业的）。<br><a href="https://github.com/wapchief/wapchief.github.io">https://github.com/wapchief/wapchief.github.io</a></p><p>优点<br>1、不需要服务器，github免费提供的托管服务<br>2、不需要域名，github同样提供了一个.io的域名<br>3、不用自己写xml、hexo提供了很多开源的博客模板。<br>4、便于维护更新，换风格直接换模板就行。</p><p>###进入正题###</p><p>安装相关工具<br>1、安装Node.js<br><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi">https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi</a><br><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi">https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi</a><br>选择需要的版本下载，分别是32位和64位。下载后安装一直默认下一步就行。<br>2、安装Git<br>Git-2.11.0.3-32-bit.exe<br>Git-2.11.0.3-64-bit.exe<br>打开cmd命令行(win+r 输入cmd回车)分别执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>会得到相对应的版本信息（如图）</p><p>如果都可以成功运行出现版本信息证明安装成功。<br>这里写过一篇介绍git的文章，如果安装遇到问题可以去查看：<br>《必须要会的Git基本使用及常用命令操作》<br>3、安装Hexo<br>必须按照步骤来，因为hexo需要使用node.js的npm命令。<br>打开cmd命令行(win+r 输入cmd回车)分别执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>等待自动安装完成后。输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo -v</span><br></pre></td></tr></table></figure><p>检查是否安装成功<br>到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目了。</p><p>#####在github上创建并设置远程库<br>注册登录略过，不会的请自行百度。<br><strong>登录后点击“+”号，选择New repository，下一步<br>在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。</strong>例如填写wapchief.github.io以后就在地址栏直接输入wapchief.github.io就可以访问网站<br>按照提示一步步完成创建。<br>创建之后，点击setting设置远程库：<br>找到GitHub Pages点击Automatic page generator<br>等待github pages创建完成，然后输入你创建的地址测试github pager是否创建成功。此时页面是空的没有任何东西。</p><p>下面要做的就是使用hexo模板将源码放到github。</p><p>#####初始化Hexo<br>创建一个文件夹用于存放hexo。然后右键该文件夹使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git bash here</span><br></pre></td></tr></table></figure><p>命令就可以直接定位到当前目录。</p><p>然后使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install hexo --save</span><br></pre></td></tr></table></figure><p>初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo init</span><br></pre></td></tr></table></figure><p>初始化hexo。这个命令和git 仓库命令相似。意思一样都是初始化。<br>接着输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install</span><br></pre></td></tr></table></figure><p>配置node。然后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo g</span><br></pre></td></tr></table></figure><p>加载hexo基础html、css、js等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo s</span><br></pre></td></tr></table></figure><p>然后相当于开启了一个本地的服务器，会提示你拷贝url到浏览器。<br>(如图)<br>在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000/</a><br>会看到这样的页面，证明本地hexo默认模板配置成功，</p><p>到这一步如果将hexo放到github page，那么使用github.io访问的将是一个默认的页面。下面我们要把他diy成自己的博客，包括导入模板主题等。</p><p>安装主题<br>关于主题大多都是以压缩包形式，可以去github上搜hexo theme，会出来很多，里面都有介绍。<br>比如我们要用第一个。<br>可以通过两种方法，这里我直接使用git命令完成，具体请参考next官方文档：<a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a><br>继续在我们的本地hexo目录输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>等待下载完成。如果出现失败的提示，有可能是网络环境不好。重试即可。<br>ok，下载完主题后我们打开文件夹，找到themes文件夹，发现里面多了个<br>next<br>这个就是我们下载下来下来的主题文件。<br>接下来我们回到hexo根目录下用记事本打开_config.yml文件。<br>把landscape修改成next就行了。<br>我们再运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器地址栏输<a href="http://localhost:4000/">http://localhost:4000/</a><br>现在是我们修改主题后的页面。</p><p>修改内容<br>内容较多建议参考官方文档<br><a href="https://hexo.io/zh-cn/docs/configuration.html">https://hexo.io/zh-cn/docs/configuration.html</a><br>修改完之后，可以重新执行hexo s在浏览器查看效果。并确认无误，包括以后需要添加文章，或者更新主题等，都建议先在本地查看无误再远程部署。<br>根_config.yml文件中</p><h1 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 网站标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 个人签名</span><br><span class="line">author: 姓名</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br><span class="line">这里有几个坑需要注意一下：</span><br></pre></td></tr></table></figure><p>1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。<br>2、language是设置语言。zh-Hans是中文。<br>3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8,方法很多具体，就不详细介绍了。</p><p>注意同时要在，根_config.yml中配置自己的远程仓库地址</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/wapchief/wapchief.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></blockquote><p>这一步很关键，不要漏了。</p><p>提交项目，部署<br>继续在本目录命令行<br>安装部署工具（方便以后更新）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;npm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure><p>1、初始化本地仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git init</span><br></pre></td></tr></table></figure><p>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git remote add origin https://github.com/wapchief/wapchief.github.io.git</span><br></pre></td></tr></table></figure><p>3、发布hexo到github page</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>4、添加文件到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git add</span><br></pre></td></tr></table></figure><p>5、提交声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git commit -m &#x27;内容&#x27;</span><br></pre></td></tr></table></figure><p>6、推送到远程仓库（github）<br>这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况<a href="https://github.com/wapchief/wapchief.github.io">https://github.com/wapchief/wapchief.github.io</a><br>创建并切换到新建分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git checkout -b hexo</span><br></pre></td></tr></table></figure><p>将分支推送到远程仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;git push origin hexo</span><br></pre></td></tr></table></figure><p>这时打开网站就能看到效果了。</p><p>记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。<br>文章在hexo目录下的\source_posts文件夹中，是md格式，也就是Markdown格式。<br>以后可以用以下命令部署。也就是第三步</p><p>//等于一次性执行了，清空、刷新、部署三个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;hexo clean &amp;&amp; hexo g &amp;&amp; hexo ｄ</span><br></pre></td></tr></table></figure><p>如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。</p><p>进阶-绑定域名<br>域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。<br>拿到域名之后，进行解析，推荐使用dnspod免费解析。<br>具体使用方法：<br>1、注册登录dnspod之后，添加域名，然后解析，添加两条记录</p><p>2、登录你注册域名网站的管理后台，修改DNS解析地址为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;f1g1ns1.dnspod.net</span><br><span class="line">f1g1ns2.dnspod.net</span><br></pre></td></tr></table></figure><p>3、登录github，找到项目，设置setting，找到GitHub Pages</p><p>4、在master分支下的CNAME.MD文件写入注册的域名</p><p>再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。</p><p>自己创建博客已经有些日子了，现在朋友想搭建博客，正好自己接触过，也整理一下，以后方便查看。所有的流程都在这里。<br>对于有git、nodeJs基础的人来说搭建起来可能也就是十几分钟的事，但是对于没接触过的就要费很大工夫。如果遇到问题欢迎留言。<br>————————————————</p></blockquote><h1 id="二，存在的问题"><a href="#二，存在的问题" class="headerlink" title="二，存在的问题"></a>二，存在的问题</h1><h2 id="1，无法git-push-－u-origin-master如图："><a href="#1，无法git-push-－u-origin-master如图：" class="headerlink" title="1，无法ｇｉｔ　ｐｕｓｈ　－ｕ　ｏｒｉｇｉｎ　ｍａｓｔｅｒ如图："></a>1，无法ｇｉｔ　ｐｕｓｈ　－ｕ　ｏｒｉｇｉｎ　ｍａｓｔｅｒ如图：</h2><img src=" /medias/blog/blog_001/git push err.png"><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p><strong>问题原因</strong>： 远程库与本地库不一致造成的，在hint中也有提示把远程库同步到本地库就可以了。</p><p><strong>解决办法</strong>：使用命令行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>该命令的意思是把远程库中的更新合并到（pull=fetch+merge）本地库中，–-rebase的作用是取消掉本地库中刚刚的commit，并把他们接到更新后的版本库之中。出现如下图执行pull执行成功后，可以成功执行<code>git push origin master</code>操作</p><h2 id="2-在验证上述问题解决方案是发生错误"><a href="#2-在验证上述问题解决方案是发生错误" class="headerlink" title="2,  在验证上述问题解决方案是发生错误"></a>2,  在验证上述问题解决方案是发生错误</h2><img src=" /medias/blog/blog_001/git pull rebase origin master.png"><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><p>问题原因: 提交到版本库中的文件没有没有提交到 分支中,还在暂存区</p><p><strong>解决办法</strong>：使用命令行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;xx&#x27; </span><br></pre></td></tr></table></figure><h2 id="3-上传tepyro图片无法访问问题"><a href="#3-上传tepyro图片无法访问问题" class="headerlink" title="3,上传tepyro图片无法访问问题"></a>3,上传tepyro图片无法访问问题</h2><p>我找到的解决方案是用html标签的img标签添加图片路径,但是md文件中不会显示图片,请有更好解决办法的朋友留言,Markdown软件是Typora</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
